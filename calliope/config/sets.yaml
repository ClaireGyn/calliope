constraints:
    storage_capacity:
        foreach: [nodes, techs]
        mask: [param(storage_cap_min), or, param(storage_cap_max), or, param(storage_cap_equals)]

    energy_capacity_storage_min:
        foreach: [nodes, techs]
        mask: [param(energy_capacity_storage_min)]

    energy_capacity_storage_max:
        foreach: [nodes, techs]
        mask: [param(energy_capacity_storage_max)]

    energy_capacity_storage_equals:
        foreach: [nodes, techs]
        mask: [param(energy_capacity_storage_equals)]

    resource_capacity:
        foreach: [nodes, techs]
        mask: [param(resource_cap_min), or, param(resource_cap_max), or, param(resource_cap_equals)]

    resource_capacity_equals_energy_capacity:
        foreach: [nodes, techs]
        switches:
            tech: {resource_cap_equals_energy_cap: True}

    resource_area:
        foreach: [nodes, techs]
        mask: [param(resource_area_min), or, param(resource_area_max), or, param(resource_area_equals)]

    resource_area_per_energy_capacity:
        foreach: [nodes, techs]
        mask: [param(resource_area_per_energy_cap)]

    resource_area_capacity_per_loc:
        foreach: [nodes]
        mask: [param(available_area)]

    energy_capacity:
        foreach: [nodes, techs]
        mask: [param(energy_cap_min), or, param(energy_cap_max), or, param(energy_cap_equals)]

    energy_capacity_systemwide:
        foreach: [techs]
        mask: [param(energy_capacity_systemwide)]

    balance_conversion_plus_primary:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(conversion_plus)]

    carrier_production_max_conversion_plus:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(conversion_plus)]
        switches:
            tech: {cap_method: linear}

    carrier_production_min_conversion_plus:
        foreach: [nodes, techs, timesteps]
        mask: [param(energy_cap_min_use), and, inheritance(conversion_plus)]
        switches:
            tech: {cap_method: linear}

    cost_var_conversion_plus:
        foreach: [nodes, techs, costs, timesteps]
        mask: [[param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)], and, inheritance(conversion_plus)]

    balance_conversion_plus_non_primary:
        foreach: [nodes, techs, carrier_tiers, timesteps]
        mask: [inheritance(conversion_plus)]
        param_idx:
            carrier_tiers: [in_2, out_2, in_3, out_3]

    conversion_plus_prod_con_to_zero:
        foreach: [nodes, techs, carriers, carrier_tiers, timesteps]
        mask: [param(carrier_ratios), and, inheritance(conversion_plus)]

    balance_conversion:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(conversion)]

    cost_var_conversion:
        foreach: [nodes, techs, costs, timesteps]
        mask: [[param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)], and, inheritance(conversion)]

    carrier_production_max:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [not inheritance(conversion_plus)]
        switches:
            tech: {cap_method: linear, allowed_carrier_prod: True}

    carrier_production_min:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(energy_cap_min_use), and, not inheritance(conversion_plus)]
        switches:
            tech: {cap_method: linear, allowed_carrier_prod: True}

    carrier_consumption_max:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [not inheritance(conversion_plus)]
        switches:
            tech: {cap_method: linear, allowed_carrier_con: True}

    resource_max:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(supply_plus)]

    storage_max:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(storage), or, inheritance(supply_plus)]
        switches:
            tech: {include_storage: True}

    storage_discharge_depth:
        foreach: [nodes, techs, timesteps]
        mask: [param(storage_discharge_depth)]

    ramping_up:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(energy_ramping)]

    ramping_down:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(energy_ramping)]

    system_balance:
        foreach: [nodes, carriers, timesteps]

    balance_supply:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(resource), and, inheritance(supply)]

    balance_demand:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [inheritance(demand)]

    balance_transmission:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [inheritance(transmission)]
        switches:
            tech: {allowed_carrier_prod: True}

    balance_supply_plus:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [inheritance(supply_plus)]

    resource_availability_supply_plus:
        foreach: [nodes, techs, timesteps]
        mask: [param(resource), and, inheritance(supply_plus)]

    balance_storage:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [inheritance(storage)]

    storage_initial:
        foreach: [nodes, techs]
        mask: [param(storage_initial)]
        switches:
            tech: {include_storage: True}

    update_export_system_balance:
        foreach: [carriers, nodes, timesteps]
        mask: [param(export_carrier)]
        switches:
            tech: {export: True}

    update_export_cost_var:
        foreach: [costs, nodes, techs, timesteps]
        mask: [param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)]
        switches:
            tech: {export: True}

    export_balance:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(export_carrier)]
        switches:
            tech: {export: True}

    export_max:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(export_max), and, param(export_carrier)]
        switches:
            tech: {export: True}

    unit_commitment_milp:
        foreach: [nodes, techs, timesteps]
        switches:
            tech: {cap_method: integer}

    unit_capacity_milp:
        foreach: [nodes, techs]
        mask: [param(units_max), or, param(units_min), or, param(units_min)]
        switches:
            tech: {cap_method: integer}

    carrier_production_max_milp:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [not inheritance(conversion_plus)]
        switches:
            tech: {cap_method: integer, allowed_carrier_prod: True}

    carrier_production_max_conversion_plus_milp:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(carrier), and, inheritance(conversion_plus)]
        param_idx:
            carrier_tiers: out
        switches:
            tech: {cap_method: integer}

    carrier_consumption_max_milp:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [not inheritance(conversion_plus)]
        switches:
            tech: {cap_method: integer, allowed_carrier_con: True}

    carrier_production_min_milp:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(energy_cap_min_use), and, not inheritance(conversion_plus)]
        switches:
            tech: {cap_method: integer, allowed_carrier_prod: True}

    carrier_production_min_conversion_plus_milp:
        foreach: [nodes, techs, carriers, timesteps]
        mask: [param(energy_cap_min_use), and, inheritance(conversion_plus)]
        switches:
            tech: {cap_method: integer, allowed_carrier_prod: True}

    storage_capacity_units_milp:
        foreach: [nodes, techs]
        mask: [inheritance(storage), or, inheritance(supply_plus)]
        switches:
            tech: {cap_method: integer, include_storage: True}

    energy_capacity_units_milp:
        foreach: [nodes, techs]
        mask: [param(energy_cap_per_unit)]
        switches:
            tech: {cap_method: integer}

    energy_capacity_max_purchase_milp:
        foreach: [nodes, techs]
        mask: [param(cost_purchase), and, [param(energy_cap_max), or, param(energy_cap_equals)]]
        switches:
            tech: {cap_method: integer}

    energy_capacity_min_purchase_milp:
        foreach: [nodes, techs]
        mask: [param(cost_purchase), and, param(energy_cap_min), and, not param(energy_cap_equals)]
        switches:
            tech: {cap_method: binary}

    storage_capacity_max_purchase_milp:
        foreach: [nodes, techs]
        mask: [param(cost_purchase), and, [param(storage_cap_max), or, param(storage_cap_equals)]]
        switches:
            tech: {cap_method: binary}

    storage_capacity_min_purchase_milp:
        foreach: [nodes, techs]
        mask: [param(cost_purchase), and, param(storage_cap_min), and, not param(storage_cap_equals)]
        switches:
            tech: {cap_method: binary}

    update_costs_investment_units_milp:
        foreach: [nodes, techs, costs]
        mask: [param(cost_energy_cap), or, param(cost_om_annual), or, param(cost_om_annual_investment_fraction), or, param(cost_purchase), or, param(cost_resource_area), or, param(cost_resource_cap), or, param(cost_storage_cap)]
        switches:
            tech: {cap_method: integer}

    update_costs_investment_purchase_milp:
        foreach: [nodes, techs, costs]
        mask: [param(cost_purchase)]
        switches:
            tech: {cap_method: binary}

    unit_capacity_systemwide_milp:
        foreach: [techs]
        mask: [param(units_max_systemwide), or, param(units_equals_systemwide)]

    asynchronous_con_milp:
        foreach: [nodes, techs, timesteps]
        switches:
            tech: {force_asynchronous_prod_con: True}

    asynchronous_prod_milp:
        foreach: [nodes, techs, timesteps]
        switches:
            tech: {force_asynchronous_prod_con: True}

    symmetric_transmission:
        foreach: [nodes, techs]
        mask: [inheritance(transmission)]

    cost_var:
        foreach: [nodes, techs, costs, timesteps]
        mask: [param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)]

    cost_investment:
        foreach: [nodes, techs, costs]
        mask: [param(cost_energy_cap), or, param(cost_om_annual), or, param(cost_om_annual_investment_fraction), or, param(cost_purchase), or, param(cost_resource_area), or, param(cost_resource_cap), or, param(cost_storage_cap)]

    cost:
        foreach: [nodes, techs, costs]
        mask: [param(cost_energy_cap), or, param(cost_om_annual), or, param(cost_om_annual_investment_fraction), or, param(cost_purchase), or, param(cost_resource_area), or, param(cost_resource_cap), or, param(cost_storage_cap), or, param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)]

variables:

    energy_cap:
        foreach: [nodes, techs]
        switches:
            run: {mode: plan}
        domain: NonNegativeReals

    carrier_prod:
        foreach: [nodes, techs, carriers, timesteps]
        domain: NonNegativeReals
        switches:
            tech: {allowed_carrier_prod: True}

    carrier_con:
        foreach: [nodes, techs, carriers, timesteps]
        domain: NonPositiveReals
        switches:
            tech: {allowed_carrier_con: True}

    cost:
        foreach: [nodes, techs, costs]
        mask: [param(cost_energy_cap), or, param(cost_om_annual), or, param(cost_om_annual_investment_fraction), or, param(cost_purchase), or, param(cost_resource_area), or, param(cost_resource_cap), or, param(cost_storage_cap), or, param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)]
        domain: Reals

    resource_area:
        foreach: [nodes, techs]
        mask: [param(resource_area_min), or, param(resource_area_max), or, param(resource_area_equals), or, param(resource_area_per_energy_cap)]
        switches:
            run: {mode: plan}
        domain: NonNegativeReals

    storage_cap:
        foreach: [nodes, techs]
        mask: [inheritance(storage), or, inheritance(supply_plus)]
        switches:
            tech: {include_storage: True}
            run: {mode: plan}
        domain: NonNegativeReals

    #storage_inter_cluster:
    #    foreach: [nodes, techs, datesteps]
    #    domain: NonNegativeReals
    #storage_intra_cluster_max:
    #    foreach: [nodes, techs, clusters]
    #    domain: Reals
    #storage_intra_cluster_min:
    #    foreach: [nodes, techs, clusters]
    #    domain: Reals

    storage:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(storage), or, inheritance(supply_plus)]
        switches:
            tech: {include_storage: True}
        domain: NonNegativeReals

    resource_con:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(supply_plus)]
        domain: NonNegativeReals

    resource_cap:
        foreach: [nodes, techs]
        mask: [inheritance(supply_plus)]
        switches:
            run: {mode: plan}
        domain: NonNegativeReals

    carrier_export:
        foreach: [nodes, techs, carriers, timesteps]
        masks: [param(cost_export)]
        switches:
            tech: {export: True}
        domain: NonNegativeReals

    cost_var:
        foreach: [nodes, techs, costs, timesteps]
        mask: [param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)]
        domain: Reals

    cost_investment:
        foreach: [nodes, techs, costs]
        mask: [param(cost_energy_cap), or, param(cost_om_annual), or, param(cost_om_annual_investment_fraction), or, param(cost_purchase), or, param(cost_resource_area), or, param(cost_resource_cap), or, param(cost_storage_cap)]
        switches:
            run: {mode: plan}
        domain: Reals

    purchased:
        foreach: [nodes, techs]
        switches:
            tech: {cap_method: binary}
            run: {mode: plan}
        domain: Binary


    #demand_share_per_timestep_decision:
    #    foreach: [nodes, techs, carriers]
    #    domain: NonNegativeReals

    units:
        foreach: [nodes, techs]
        switches:
            tech: {cap_method: integer}
            run: {mode: plan}
        domain: NonNegativeIntegers

    operating_units:
        foreach: [nodes, techs, timesteps]
        switches:
            tech: {cap_method: integer}
        domain: NonNegativeIntegers

    prod_con_switch:
        foreach: [nodes, techs, timesteps]
        switches:
            tech: {force_asynchronous_prod_con: True}
        domain: Binary

    unmet_demand:
        foreach: [nodes, carriers, timesteps]
        switches:
            run: {ensure_feasibility: True}
        domain: NonNegativeReals

    unused_supply:
        foreach: [nodes, carriers, timesteps]
        switches:
            run: {ensure_feasibility: True}
        domain: NegativeReals

expressions:
    system_balance:
        foreach: [nodes, carriers, timesteps]

    required_resource:
        foreach: [nodes, techs, timesteps]
        mask: [inheritance(demand)]

    cost_investment_rhs:
        foreach: [nodes, techs, costs]
        mask: [param(cost_energy_cap), or, param(cost_om_annual), or, param(cost_om_annual_investment_fraction), or, param(cost_purchase), or, param(cost_resource_area), or, param(cost_resource_cap), or, param(cost_storage_cap)]
        switches:
            run: {mode: plan}

    cost_var_rhs:
        foreach: [nodes, techs, costs, timesteps]
        mask: [param(cost_export), or, param(cost_om_con), or, param(cost_om_prod)]
